-- Task 9: Creating a Database
-- SQL Command Practice: Write the SQL command to create a new database named StudentDB.

CREATE DATABASE StudentDB;

-- /////////////////////////////////////////////////////////

-- Task 10: Creating a Table
-- SQL Command Practice: Write the SQL command to create a table named Students with the following columns:
-- o	id (INT, primary key, auto-increment)
-- o	name (VARCHAR(100), not null)
-- o	email (VARCHAR(100))
-- o	enrollment_date (DATE)


CREATE TABLE Students (
    id INT AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    enrollment_date DATE,
    PRIMARY KEY (id)
);

-- /////////////////////////////////////////////////////////

-- Task 11: Insert, Update, Delete
-- 1.	Insert Data: Write the SQL command to insert a new student record into the Students table.
-- 2.	Update Data: Write the SQL command to update the email of the student with id = 1.
-- 3.	Delete Data: Write the SQL command to delete the student record with id = 1

-- 1. Insert Data
INSERT INTO Students (name, email, enrollment_date)
VALUES ('John Doe', 'john.doe@example.com', '2024-07-23');

-- 2. Update Data
UPDATE Students
SET email = 'new.email@example.com'
WHERE id = 1;

-- 3. Delete Data
DELETE FROM Students
WHERE id = 1;

-- /////////////////////////////////////////////////////////

-- Task 12: Using a Database
-- SQL Command Practice: Write the SQL command to select and use the StudentDB database.

USE StudentDB;

-- /////////////////////////////////////////////////////////

-- Task 13: Creating a Database and Table
-- 1.	Hands-On: Using phpMyAdmin, create a new database named PracticeDB.
-- 2.	Create Table: In PracticeDB, create a table named Employees with the following structure:
-- o	emp_id (INT, primary key, auto-increment)
-- o	emp_name (VARCHAR(100), not null)
-- o	emp_position (VARCHAR(100))
-- o	hire_date (DATE)

CREATE TABLE Employees (
    emp_id INT AUTO_INCREMENT,
    emp_name VARCHAR(100) NOT NULL,
    emp_position VARCHAR(100),
    hire_date DATE,
    PRIMARY KEY (emp_id)
);

-- /////////////////////////////////////////////////////////

-- Task 14: Working with Different Data Types
-- 1.	Create Tables: Create additional tables in PracticeDB with columns that use various data types (numeric, string, date/time).

1. Table with Numeric Data Types

CREATE TABLE Products (
    product_id INT AUTO_INCREMENT,
    product_name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT,
    PRIMARY KEY (product_id)
);

2. Table with String Data Types

CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(15),
    PRIMARY KEY (customer_id)
);

3. Table with Date/Time Data Types

CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT,
    customer_id INT,
    order_date DATETIME,
    delivery_date DATE,
    total_amount DECIMAL(10, 2),
    PRIMARY KEY (order_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- /////////////////////////////////////////////////////////

-- Task 15: Data Manipulation
-- 1.	Insert Data: Insert at least three records into the Employees table.
INSERT INTO Employees (emp_name, emp_position, hire_date)
VALUES 
    ('Alice Johnson', 'Software Engineer', '2024-01-15'),
    ('Bob Smith', 'Data Analyst', '2024-02-20'),
    ('Carol Williams', 'Product Manager', '2024-03-10');

-- 2.	Update Data: Update the emp_position of one of the employees.
UPDATE Employees
SET emp_position = 'Senior Data Analyst'
WHERE emp_name = 'Bob Smith';

-- 3.	Delete Data: Delete one of the employee records from the table.
DELETE FROM Employees
WHERE emp_name = 'Carol Williams';


